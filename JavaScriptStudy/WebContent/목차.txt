01typeof
	-- typeof.html
	1) boolean 형은 true, false 가 들어가면 자동으로 자료형이 boolean 형이 된다.
	= 변수 선언은 똑같이 var bool = true; 로 하면 bool 변수가 boolean 형이 된다.
	
	2) 객체 이용
	 1. 객체 생성 방법_1
	 var person1 = {};
	 person1.userid = "leess";
	 person1.pwd = "qwe1234";
	 person1.name = "이순신";
	 person1.age = 25;
	 (person1["age"] = 25; 이렇게도 사용되어 진다.)
	        객체 생성 방법_2
	 var person2 = {userid:"eomjh", pwd:"abcd1234", name:"엄정화", age:27};
	 
	3) 함수 
	 1. 함수를 생성하여 함수 호출로 이용
	 = 함수 생성은 window.onload 바깥쪽으로 빼서 생성
	 = 함수를 생성할 때, 파라미터의 자료형은 써주면 안된다. 
	 function func_sum(num1, num2) {
	 
	 	if(typeof(num1) == "string"){
			num1 = Number(num1);
		}
		if(typeof(num2) == "string"){
			num2 = Number(num2);
		}
		
		return num1 + num2;
	 }
	 -- 호출 (함수 이름을 이용하여 호출)--
	 => document.getElementById("result25").innerHTML = func_sum(val23, val24);
	
	 2. 함수를 변수에 넣어서 호출
	 = 자바 스크립트에서는 함수도 변수에 넣을 수 있다.
	 var func_minus = function(num1, num2){
	 	if(typeof(num1) == "string"){
			num1 = Number(num1);
		}
		if(typeof(num2) == "string"){
			num2 = Number(num2);
		}
		return num1 - num2;
	 }; // 세미콜론 꼭 붙이기!	
	 -- 호출 (변수 이름을 이용하여 호출) --
	 document.getElementById("result27").innerHTML = func_minus(val25, val26);

02getElement
	-- getElement.html
 	1) 자바 스크립트에서 태그를 가지고 선택자를 잡는 방법
 	= document.getElementsByTagName("태그명");
 	= 리턴 타입 : 객체 배열
 	
 	var arrDiv = document.getElementsByTagName("div");
 	= div라는 태그의 글을 arrDiv의 객체 배열에 넣어준다. (div는 여러개가 존재할 수 있으므로 객체 배열에 넣는다.)
 	
 	for(var i=0; i<arrDiv.length; i++){
 		arrDiv[i].style.~
 	}
	
	2) 자바 스크립트에서 클래스를 가지고 선택자를 잡는 방법
	= document.getElementsByClassName("클래스명");
	= 리턴 타입 : 객체 배열
	
	3) 자바 스크립트에서 name 속성을 가지고 선택자를 잡는 방법
	[name 속성은 체크박스에서 동일하게 주어야지 checkbox가 묶어지는 속성이다.]
	= document.getElementsByName("name 값");
	= 리턴 타입 : 객체 배열
	
	4) 자바 스크립트에서 id값을 가지고 선택자를 잡는 방법
	= document.getElementById("id 값");
	= 리턴 타입 : 객체 (id값은 딱 하나만 오기 때문에 객체 배열이 아닌 '객체'이다.)
	
	5) 이벤트 발생 
	// 버튼 객체를 변수에 가져온다.
	var btnok = document.getElementById("btnOk");
	 1. onclick이용.
	// btnok를 클릭했을 때 함수가 실행된다.
	btnok.onclick = function { ~ }
	 2. addEventListener 이용.
	btnChkbox.addEventListener("click", function(){
		~
	});
	
	
	
	
	
	
	
	03javascriptStandardObject
		-- 01Array
			-- 01push_pop_splice_reverse_sort_slice_indexOf_forEach.html
	1) 배열
	 1. 첫번째 버전
	 - 배열 선언
	 = var arrFruit1 = new Array();
	 - 배열에 값 넣어주기
	 = arrFruit1.push("사과 ")
	      배열 속성1. : push() : 배열에 마지막에 새로운 요소 추가(배열의 길이를 반환)
	 2. 두번째 버전
	 - 배열 선언 + 초기화 
	 = var arrFruit2 = {"사과","딸기"...}
	 
	 - 배열에 있는 내용을 특정 엘리먼트 속에 보여주는 함수
	 3. 함수 
	   3-1. 함수 생성 첫번째 버전_window.onload 안에 넣고 싶을 때! => 변수 안에 함수를 넣어준다.
	 	// arr : 출력하고 싶은 배열, displayid : 엘리먼트의 id 속성
		 var func_display2 = function(arr, displayid) {
		 	var html = "<ol>"
		 	for(var i=0; i<arr.length; i++) {
		 		html += "<li>" + arr[i] + "</li>"
		 	}
		 	html += "</oi>"
	 	
	 		displayid.innerHTML = html;
	 	}
	   3-2. 함수 생성 두번째 버전_window.onload 밖에 넣고 싶을 때!
	     function func_display1(arr, displayid){
	     	var html = "<ol>"
	     	for(var i=0; i<arr.length; i++){
	     		html += "<li>" + arr[i] + "</li>"
	     	}
	     	html += "</ol>"
	     	
	     	displayid.innerHTML = html;
	     }
	     
	 3. 배열의 맨 마지막 요소에 추가 및 삭제
	 - 추가 : push() _ 변경된 배열의 길이를 반환
	 - 삭제 : pop() _ 제거한 요소를 반환
	 
	 4. 배열의 맨 처음에 추가 및 삭제
	 - 추가 : unshift _ 변경된 배열의 길이를 반환
	 - 삭제 : shift _ 제거한 요소를 반환
	 
	 5. 배열의 특정 위치에 추가 및 삭제
	 - 추가 : splice(start, 0, element)
		 - start : 수정할 배열 요소의 인덱스
		 - 0 : 요소를 추가할 경우
		 - element : 배열에 추가될 요소
		 ex) arrFruit1.splice(2,0,"밤","감"); _ index가 2인 원소 뒤에 밤과 김을 추가
	 - 삭제 : splice(start, deleteCount)
	 	- start : 수정할 배열 요소의 인덱스
	 	- deleteCount : 삭제할 요소 개수
	 	ex) arrFruit1.splice(1,3); _ index가 1인 원소부터 3개의 원소 삭제
	 
	 6. 배열의 요소 역순으로 만들기 
	 - 역순 : reverse() 
	 
	 7. 배열의 요소를 오름차순 및 내림차순 정렬
	 - 오름차순 정렬 : sort()
	   = 기본적으로 배열의 요소를 문자열로 변환한 후, 오름차순으로 정렬
	 - 내림차순 정렬 : sort().reverse()
	   = 기본적으로 배열의 요소를 문자열로 변환한 후, 오름차순으로 정렬한 후, 뒤집어 주면 된다. 
	
	 8. 배열의 전체 요소를 하나의 문자열로 반환
	 - join("구분문자")
	   = 구분문자를 사용해서 배욜을 하나의 문자열로 만들어 반환시켜준다.
	   = 공백도 구분문자로 인식한다.
	   = 구분문자를 쓰지 않고 join()을 하면 기본적으로 ,로 찍혀서 나온다.
	   
	 9. 배열의 숫자 요소를 오름차순 및 내림차순으로 정렬_잘사용하지 않음_이런것이 있다 정도!
	 - 오름차순 : sort(function(a,b){return a-b;})
	 - 내림차순 : sort(function(a,b){return b-a;})
	 
	 10. 배열의 일부분을 잘라내서 새로운 배열로 만들기
	 - 첫번 째 버전 : slice(index1, index2)
	   = 배열의 요소를 index1부터 index2 - 1 까지 잘라서 새로운 배열 변수를 생성하여 넣어준다.
	   ex. var arr1 = arrFood.slice(1,5);
	 - 두번 째 버전 : slice(index1)
	   = index2를 지정하지 않으면 index1 ~ 끝까지 잘라서 새로운 배열 변수를 생성하여 넣어준다.
	   
	 11. 배열 속의 원소들의 index값 알아오기
	 - indexOf(찾을value값, 출발index번호)
	   = 찾을 value값을 출발 index부터 찾는다. 
	   = 해당 value를 찾으면 그 value의 index값을 반환
	   = 출발 index번호가 생략 : 0부터 시작과 같은 말
	 - lastIndexOf(찾을value값, 출발index번호)
	   = 출발 index번호 부터 역순으로 검색하여 가장 먼저 찾은 요소의 index값을 반환
	 = 찾을 값이 존재하지 않는다면 -1 반환.        
	 
	 12. javascript의 개선된 for문
	 - 배열명.forEach(function(item, index, array){});
	   = item : 현재 처리중인 배열의 각 요소 _ 필수적
	   = index : 현재 처리중인 배열의 각 요소의 인덱스 _ 선택적
	   = array : forEach()가 적용되어지고 있는 배열 _ 선택적



			-- 02중복된요소제거하기1_split_join.html
			-- 03중복된요소제거하기2_split_join.html
	1) input 태그에서 type으로 스타일 주는 방법
	= input[type=text]
	= input[type=button] 
	  : 버튼 같은 경우, 테두리를 없애기 위해서는 border: none으로 한다.
		
	2) split()
	= 콤마로 구분되어지는 문자열은 split(",") 함수를 사용해서 배열로 반환되어질 수 있다.
		
	3) input() 타입에서 값을 넣어 줄 때!
	= input 태그를 id값으로 잡아주고 .innerHTML이 아니라 .value를 사용하여 값을 넣어준다.
	
	4) forEach() 반복문은 for() 문과 달리 break를 쓸 수 없다.
	
			-- 04객체배열_selectedIndex.html
	1) 객체 배열 생성
	var arrPerson = [{}, {}, {}...];
	
	2) 화면을 보이지 않도록 하는 방법
	= 태그를 잡아주고 그 변수.style.display = "none";
	하지만 ! 이렇게 해주면 다시 돌아갈때도 none 상태이다. 따라서 기본값을 줘야 한다.
	= 기본값 : 변수.style.display =""; 
	
			-- 04객체배열_selectedIndex.html
	1) div로 묶어준 부분의 내용물이 그 안에 꽉 담기지 않을때에는 : min-height or max-height를 주고, overflow: hidden을 주면 된다.
	
	2) select 태그 이벤트
	= select 태그의 이벤트는 click이 아니라 change이다!!!!!
	= this.selectedIndex; 를 지정하면  선택된 select 항목의 인덱스가 넣어지는 변수이다.
	
	3) .some(function(item, index){});
	= 이거는 forEach문은 break가 없지만 some은 break문이 있는 것이다. 
	= 여기서는 따로 break문을 써주지 않고 조건이 true가 되는 순간 반복문을 빠져나간다. 
	= item과 index는 forEach문과 동일하다. 	
	
	
	
		--02Date
			--01현재날짜시간_시계만들기.html
	1) new Date() : 실행되는 시점에 날짜 및 시간 데이터를 갖고 오는 것이다.
	
	2) 종류
                                 리턴값
           		 -----------------------------------
	             getFullYear()      YYYY
	             getMonth()         MM     자바스크립트의 월은 0부터 시작하기 때문에 1을 더해야 정상적인 월이 된다.
	             getDate()          DD
	             getDay()           0 ~ 6 (일 ~ 토)
	             getHours()         HH
	             getMinutes()       MM
	             getSeconds()       SS
	             getMilliseconds()  mmm
	             
	
	3) set 날짜함수
	= setFullYear(), setMonth(), setHours(), setMinutes(), setSeconde(), setMilliseconds()
	
	4) 몇초마다 다시 함수를 부르는 재귀함수
	- 첫번째 버전
	= setTimeout("이 메서드가 정의된 함수 이름", 1000);
	  : 1000 - 1초, 2000 - 2초...
	- 두번째 버전
	= setInterval(function() {
		document.getElementById("nowDate").innerHTML = func_currentDate();
	}, 1000);
	
	---------------------------------------
	addEventListener()로 할때! 는 객체를 불러와 바로 찍어주므로, this를 사용해도 되지만,
	onclick을 사용할때에는 태그 안에 넣어주는 것이므로, onclick안에 함수를 쓸때 그 함수의 매개변수로 this를 주어야지
	함수에서 사용이 가능하다!!!!!!!!!!!!
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	